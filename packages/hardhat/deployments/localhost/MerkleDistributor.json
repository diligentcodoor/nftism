{
  "address": "0xe8D2A1E88c91DCd5433208d4152Cc4F399a7e91d",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token_",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "merkleRoot_",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Claimed",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes32[]",
          "name": "merkleProof",
          "type": "bytes32[]"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "isClaimed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "merkleRoot",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x0bbb80fbb2e2c9a4e3954f2907639520f0537b7677063b73afd710ab17064c77",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe8D2A1E88c91DCd5433208d4152Cc4F399a7e91d",
    "transactionIndex": 0,
    "gasUsed": "671666",
    "logsBloom": "0x
    "blockHash": "0x6dd4777b53b98eddd7de062f22aef51fbea93f7c546441ec7eeba93172f0e341",
    "transactionHash": "0x0bbb80fbb2e2c9a4e3954f2907639520f0537b7677063b73afd710ab17064c77",
    "logs": [],
    "blockNumber": 13856346,
    "cumulativeGasUsed": "671666",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x720472c8ce72c2A2D711333e064ABD3E6BbEAdd3",
    "0xa959dce039a91870eb4a58af53c28592b604e9f5201af9ef0fcf50401462fe39"
  ],
  "solcInputHash": "4de33a0135c4801cf92cc81e8b8d0691",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"merkleRoot_\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"isClaimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"merkleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MerkleDistributor.sol\":\"MerkleDistributor\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Trees proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merklee tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            bytes32 proofElement = proof[i];\\n            if (computedHash <= proofElement) {\\n                // Hash(current computed hash + current element of the proof)\\n                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\\n            } else {\\n                // Hash(current element of the proof + current computed hash)\\n                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\\n            }\\n        }\\n        return computedHash;\\n    }\\n}\\n\",\"keccak256\":\"0x9c35727c74a6ffd8d02237b414e7bfb532c0323b1088709def98ea5c628157de\",\"license\":\"MIT\"},\"contracts/MerkleDistributor.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.11;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\n\\ncontract MerkleDistributor {\\n    address public immutable token;\\n    bytes32 public immutable merkleRoot;\\n    mapping(address => bool) private claimed;\\n\\n    event Claimed(address account, uint256 amount);\\n\\n    constructor(address token_, bytes32 merkleRoot_) {\\n      token = token_;\\n      merkleRoot = merkleRoot_;\\n    }\\n\\n    function isClaimed(address user) public view returns (bool) {\\n      return claimed[user];\\n    }\\n\\n    function claim(\\n      address account,\\n      uint256 amount,\\n      bytes32[] calldata merkleProof\\n    ) public {\\n      require(!isClaimed(account), \\\"MerkleDistributor: Drop already claimed.\\\");\\n      // Verify the merkle proof.\\n      bytes32 node = keccak256(abi.encodePacked(account, amount));\\n\\n      require(\\n          MerkleProof.verify(merkleProof, merkleRoot, node),\\n          \\\"MerkleDistributor: Invalid proof.\\\"\\n      );\\n\\n      // do your logic accordingly here\\n      claimed[account] = true;\\n      require(IERC20(token).transfer(account, amount), \\\"MerkleDistributor: Transfer failed.\\\");\\n\\n      emit Claimed(account, amount);\\n    }\\n}\",\"keccak256\":\"0x15914ae0b76dcaa594f395a1cdee7eb883d604448b5cb8275dfda4082f6b5f33\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b5060405162000cbe38038062000cbe833981810160405281019062000037919062000120565b8173ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff16815250508060a08181525050505062000167565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000ad8262000080565b9050919050565b620000bf81620000a0565b8114620000cb57600080fd5b50565b600081519050620000df81620000b4565b92915050565b6000819050919050565b620000fa81620000e5565b81146200010657600080fd5b50565b6000815190506200011a81620000ef565b92915050565b600080604083850312156200013a57620001396200007b565b5b60006200014a85828601620000ce565b92505060206200015d8582860162000109565b9150509250929050565b60805160a051610b246200019a6000396000818160db01526101ba01526000818161027701526103e90152610b246000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80632eb4a7ab146100515780633d13f8741461006f5780638cc080251461008b578063fc0c546a146100bb575b600080fd5b6100596100d9565b60405161006691906104ee565b60405180910390f35b6100896004803603810190610084919061060c565b6100fd565b005b6100a560048036038101906100a09190610680565b610392565b6040516100b291906106c8565b60405180910390f35b6100c36103e7565b6040516100d091906106f2565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000081565b61010684610392565b15610146576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161013d90610790565b60405180910390fd5b6000848460405160200161015b929190610819565b6040516020818303038152906040528051906020012090506101df838380806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050507f00000000000000000000000000000000000000000000000000000000000000008361040b565b61021e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610215906108b7565b60405180910390fd5b60016000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb86866040518363ffffffff1660e01b81526004016102d09291906108e6565b6020604051808303816000875af11580156102ef573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610313919061093b565b610352576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610349906109da565b60405180910390fd5b7fd8138f8a3f377c5259ca548e70e4c2de94f129f5a11036a15b69513cba2b426a85856040516103839291906108e6565b60405180910390a15050505050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000826104188584610422565b1490509392505050565b60008082905060005b84518110156104ca576000858281518110610449576104486109fa565b5b6020026020010151905080831161048a57828160405160200161046d929190610a4a565b6040516020818303038152906040528051906020012092506104b6565b808360405160200161049d929190610a4a565b6040516020818303038152906040528051906020012092505b5080806104c290610aa5565b91505061042b565b508091505092915050565b6000819050919050565b6104e8816104d5565b82525050565b600060208201905061050360008301846104df565b92915050565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061053e82610513565b9050919050565b61054e81610533565b811461055957600080fd5b50565b60008135905061056b81610545565b92915050565b6000819050919050565b61058481610571565b811461058f57600080fd5b50565b6000813590506105a18161057b565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f8401126105cc576105cb6105a7565b5b8235905067ffffffffffffffff8111156105e9576105e86105ac565b5b602083019150836020820283011115610605576106046105b1565b5b9250929050565b6000806000806060858703121561062657610625610509565b5b60006106348782880161055c565b945050602061064587828801610592565b935050604085013567ffffffffffffffff8111156106665761066561050e565b5b610672878288016105b6565b925092505092959194509250565b60006020828403121561069657610695610509565b5b60006106a48482850161055c565b91505092915050565b60008115159050919050565b6106c2816106ad565b82525050565b60006020820190506106dd60008301846106b9565b92915050565b6106ec81610533565b82525050565b600060208201905061070760008301846106e3565b92915050565b600082825260208201905092915050565b7f4d65726b6c654469737472696275746f723a2044726f7020616c72656164792060008201527f636c61696d65642e000000000000000000000000000000000000000000000000602082015250565b600061077a60288361070d565b91506107858261071e565b604082019050919050565b600060208201905081810360008301526107a98161076d565b9050919050565b60008160601b9050919050565b60006107c8826107b0565b9050919050565b60006107da826107bd565b9050919050565b6107f26107ed82610533565b6107cf565b82525050565b6000819050919050565b61081361080e82610571565b6107f8565b82525050565b600061082582856107e1565b6014820191506108358284610802565b6020820191508190509392505050565b7f4d65726b6c654469737472696275746f723a20496e76616c69642070726f6f6660008201527f2e00000000000000000000000000000000000000000000000000000000000000602082015250565b60006108a160218361070d565b91506108ac82610845565b604082019050919050565b600060208201905081810360008301526108d081610894565b9050919050565b6108e081610571565b82525050565b60006040820190506108fb60008301856106e3565b61090860208301846108d7565b9392505050565b610918816106ad565b811461092357600080fd5b50565b6000815190506109358161090f565b92915050565b60006020828403121561095157610950610509565b5b600061095f84828501610926565b91505092915050565b7f4d65726b6c654469737472696275746f723a205472616e73666572206661696c60008201527f65642e0000000000000000000000000000000000000000000000000000000000602082015250565b60006109c460238361070d565b91506109cf82610968565b604082019050919050565b600060208201905081810360008301526109f3816109b7565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000819050919050565b610a44610a3f826104d5565b610a29565b82525050565b6000610a568285610a33565b602082019150610a668284610a33565b6020820191508190509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610ab082610571565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610ae357610ae2610a76565b5b60018201905091905056fea26469706673582212202cfcdabae6cb56b104e6d8df9cc9ae50ab8e9ca959fe46f345721d308bcdf2bd64736f6c634300080b0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c80632eb4a7ab146100515780633d13f8741461006f5780638cc080251461008b578063fc0c546a146100bb575b600080fd5b6100596100d9565b60405161006691906104ee565b60405180910390f35b6100896004803603810190610084919061060c565b6100fd565b005b6100a560048036038101906100a09190610680565b610392565b6040516100b291906106c8565b60405180910390f35b6100c36103e7565b6040516100d091906106f2565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000081565b61010684610392565b15610146576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161013d90610790565b60405180910390fd5b6000848460405160200161015b929190610819565b6040516020818303038152906040528051906020012090506101df838380806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050507f00000000000000000000000000000000000000000000000000000000000000008361040b565b61021e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610215906108b7565b60405180910390fd5b60016000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb86866040518363ffffffff1660e01b81526004016102d09291906108e6565b6020604051808303816000875af11580156102ef573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610313919061093b565b610352576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610349906109da565b60405180910390fd5b7fd8138f8a3f377c5259ca548e70e4c2de94f129f5a11036a15b69513cba2b426a85856040516103839291906108e6565b60405180910390a15050505050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000826104188584610422565b1490509392505050565b60008082905060005b84518110156104ca576000858281518110610449576104486109fa565b5b6020026020010151905080831161048a57828160405160200161046d929190610a4a565b6040516020818303038152906040528051906020012092506104b6565b808360405160200161049d929190610a4a565b6040516020818303038152906040528051906020012092505b5080806104c290610aa5565b91505061042b565b508091505092915050565b6000819050919050565b6104e8816104d5565b82525050565b600060208201905061050360008301846104df565b92915050565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061053e82610513565b9050919050565b61054e81610533565b811461055957600080fd5b50565b60008135905061056b81610545565b92915050565b6000819050919050565b61058481610571565b811461058f57600080fd5b50565b6000813590506105a18161057b565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f8401126105cc576105cb6105a7565b5b8235905067ffffffffffffffff8111156105e9576105e86105ac565b5b602083019150836020820283011115610605576106046105b1565b5b9250929050565b6000806000806060858703121561062657610625610509565b5b60006106348782880161055c565b945050602061064587828801610592565b935050604085013567ffffffffffffffff8111156106665761066561050e565b5b610672878288016105b6565b925092505092959194509250565b60006020828403121561069657610695610509565b5b60006106a48482850161055c565b91505092915050565b60008115159050919050565b6106c2816106ad565b82525050565b60006020820190506106dd60008301846106b9565b92915050565b6106ec81610533565b82525050565b600060208201905061070760008301846106e3565b92915050565b600082825260208201905092915050565b7f4d65726b6c654469737472696275746f723a2044726f7020616c72656164792060008201527f636c61696d65642e000000000000000000000000000000000000000000000000602082015250565b600061077a60288361070d565b91506107858261071e565b604082019050919050565b600060208201905081810360008301526107a98161076d565b9050919050565b60008160601b9050919050565b60006107c8826107b0565b9050919050565b60006107da826107bd565b9050919050565b6107f26107ed82610533565b6107cf565b82525050565b6000819050919050565b61081361080e82610571565b6107f8565b82525050565b600061082582856107e1565b6014820191506108358284610802565b6020820191508190509392505050565b7f4d65726b6c654469737472696275746f723a20496e76616c69642070726f6f6660008201527f2e00000000000000000000000000000000000000000000000000000000000000602082015250565b60006108a160218361070d565b91506108ac82610845565b604082019050919050565b600060208201905081810360008301526108d081610894565b9050919050565b6108e081610571565b82525050565b60006040820190506108fb60008301856106e3565b61090860208301846108d7565b9392505050565b610918816106ad565b811461092357600080fd5b50565b6000815190506109358161090f565b92915050565b60006020828403121561095157610950610509565b5b600061095f84828501610926565b91505092915050565b7f4d65726b6c654469737472696275746f723a205472616e73666572206661696c60008201527f65642e0000000000000000000000000000000000000000000000000000000000602082015250565b60006109c460238361070d565b91506109cf82610968565b604082019050919050565b600060208201905081810360008301526109f3816109b7565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000819050919050565b610a44610a3f826104d5565b610a29565b82525050565b6000610a568285610a33565b602082019150610a668284610a33565b6020820191508190509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610ab082610571565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610ae357610ae2610a76565b5b60018201905091905056fea26469706673582212202cfcdabae6cb56b104e6d8df9cc9ae50ab8e9ca959fe46f345721d308bcdf2bd64736f6c634300080b0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 770,
        "contract": "contracts/MerkleDistributor.sol:MerkleDistributor",
        "label": "claimed",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      }
    }
  }
}
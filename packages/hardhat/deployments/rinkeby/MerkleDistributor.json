{
  "address": "0xD82019E5F653e5ceaE03ECf8412f007F20BEB88C",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token_",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "merkleRoot_",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Claimed",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes32[]",
          "name": "merkleProof",
          "type": "bytes32[]"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "isClaimed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "merkleRoot",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x3165dd077363c9621b09e23d95272d045b942a575490cdda707d65c6f852f9ce",
  "receipt": {
    "to": null,
    "from": "0x1489A38EA1B5b1547301a480f19Fa17a0A3db223",
    "contractAddress": "0xD82019E5F653e5ceaE03ECf8412f007F20BEB88C",
    "transactionIndex": 58,
    "gasUsed": "695181",
    "logsBloom": "0x
    "blockHash": "0xbd24d97d91b9882b9c99db51b0f8581bfdbb4cc302edf954af68a406970b1ecc",
    "transactionHash": "0x3165dd077363c9621b09e23d95272d045b942a575490cdda707d65c6f852f9ce",
    "logs": [],
    "blockNumber": 9865914,
    "cumulativeGasUsed": "9900303",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x11ae08fC5124b244451884926baFe857316f7ccc",
    "0x9c9699b1a67094b7fa5e62e13180a25148dd35d7a51065453a2b6888c7cf6372"
  ],
  "solcInputHash": "99e7ba5280a09d06e90fbf85a023f81e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"merkleRoot_\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"isClaimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"merkleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MerkleDistributor.sol\":\"MerkleDistributor\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Trees proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merklee tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            bytes32 proofElement = proof[i];\\n            if (computedHash <= proofElement) {\\n                // Hash(current computed hash + current element of the proof)\\n                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\\n            } else {\\n                // Hash(current element of the proof + current computed hash)\\n                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\\n            }\\n        }\\n        return computedHash;\\n    }\\n}\\n\",\"keccak256\":\"0x9c35727c74a6ffd8d02237b414e7bfb532c0323b1088709def98ea5c628157de\",\"license\":\"MIT\"},\"contracts/MerkleDistributor.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.11;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\n\\ncontract MerkleDistributor {\\n    address public immutable token;\\n    bytes32 public immutable merkleRoot;\\n    mapping(address => bool) private claimed;\\n\\n    event Claimed(address account, uint256 amount);\\n\\n    constructor(address token_, bytes32 merkleRoot_) {\\n      token = token_;\\n      merkleRoot = merkleRoot_;\\n    }\\n\\n    function isClaimed(address user) public view returns (bool) {\\n      return claimed[user];\\n    }\\n\\n    function claim(\\n      address account,\\n      uint256 amount,\\n      bytes32[] calldata merkleProof\\n    ) public {\\n      require(!isClaimed(account), \\\"MerkleDistributor: Drop already claimed.\\\");\\n      bytes32 node = keccak256(abi.encodePacked(account, amount));\\n\\n      require(\\n          MerkleProof.verify(merkleProof, merkleRoot, node),\\n          \\\"MerkleDistributor: Invalid proof.\\\"\\n      );\\n\\n      claimed[account] = true;\\n      require(IERC20(token).transfer(account, amount * 10**18), \\\"MerkleDistributor: Transfer failed.\\\");\\n\\n      emit Claimed(account, amount);\\n    }\\n}\",\"keccak256\":\"0x2d2514d50b30a62d52aa99c7cd23929d42c2ba1641ac992c6f93f0d5ac38dcfa\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b5060405162000d2b38038062000d2b833981810160405281019062000037919062000120565b8173ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff16815250508060a08181525050505062000167565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000ad8262000080565b9050919050565b620000bf81620000a0565b8114620000cb57600080fd5b50565b600081519050620000df81620000b4565b92915050565b6000819050919050565b620000fa81620000e5565b81146200010657600080fd5b50565b6000815190506200011a81620000ef565b92915050565b600080604083850312156200013a57620001396200007b565b5b60006200014a85828601620000ce565b92505060206200015d8582860162000109565b9150509250929050565b60805160a051610b916200019a6000396000818160db01526101ba01526000818161027701526103fc0152610b916000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80632eb4a7ab146100515780633d13f8741461006f5780638cc080251461008b578063fc0c546a146100bb575b600080fd5b6100596100d9565b6040516100669190610501565b60405180910390f35b6100896004803603810190610084919061061f565b6100fd565b005b6100a560048036038101906100a09190610693565b6103a5565b6040516100b291906106db565b60405180910390f35b6100c36103fa565b6040516100d09190610705565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000081565b610106846103a5565b15610146576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161013d906107a3565b60405180910390fd5b6000848460405160200161015b92919061082c565b6040516020818303038152906040528051906020012090506101df838380806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050507f00000000000000000000000000000000000000000000000000000000000000008361041e565b61021e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610215906108ca565b60405180910390fd5b60016000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb86670de0b6b3a7640000876102c69190610919565b6040518363ffffffff1660e01b81526004016102e3929190610982565b6020604051808303816000875af1158015610302573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061032691906109d7565b610365576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161035c90610a76565b60405180910390fd5b7fd8138f8a3f377c5259ca548e70e4c2de94f129f5a11036a15b69513cba2b426a8585604051610396929190610982565b60405180910390a15050505050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008261042b8584610435565b1490509392505050565b60008082905060005b84518110156104dd57600085828151811061045c5761045b610a96565b5b6020026020010151905080831161049d578281604051602001610480929190610ae6565b6040516020818303038152906040528051906020012092506104c9565b80836040516020016104b0929190610ae6565b6040516020818303038152906040528051906020012092505b5080806104d590610b12565b91505061043e565b508091505092915050565b6000819050919050565b6104fb816104e8565b82525050565b600060208201905061051660008301846104f2565b92915050565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061055182610526565b9050919050565b61056181610546565b811461056c57600080fd5b50565b60008135905061057e81610558565b92915050565b6000819050919050565b61059781610584565b81146105a257600080fd5b50565b6000813590506105b48161058e565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f8401126105df576105de6105ba565b5b8235905067ffffffffffffffff8111156105fc576105fb6105bf565b5b602083019150836020820283011115610618576106176105c4565b5b9250929050565b600080600080606085870312156106395761063861051c565b5b60006106478782880161056f565b9450506020610658878288016105a5565b935050604085013567ffffffffffffffff81111561067957610678610521565b5b610685878288016105c9565b925092505092959194509250565b6000602082840312156106a9576106a861051c565b5b60006106b78482850161056f565b91505092915050565b60008115159050919050565b6106d5816106c0565b82525050565b60006020820190506106f060008301846106cc565b92915050565b6106ff81610546565b82525050565b600060208201905061071a60008301846106f6565b92915050565b600082825260208201905092915050565b7f4d65726b6c654469737472696275746f723a2044726f7020616c72656164792060008201527f636c61696d65642e000000000000000000000000000000000000000000000000602082015250565b600061078d602883610720565b915061079882610731565b604082019050919050565b600060208201905081810360008301526107bc81610780565b9050919050565b60008160601b9050919050565b60006107db826107c3565b9050919050565b60006107ed826107d0565b9050919050565b61080561080082610546565b6107e2565b82525050565b6000819050919050565b61082661082182610584565b61080b565b82525050565b600061083882856107f4565b6014820191506108488284610815565b6020820191508190509392505050565b7f4d65726b6c654469737472696275746f723a20496e76616c69642070726f6f6660008201527f2e00000000000000000000000000000000000000000000000000000000000000602082015250565b60006108b4602183610720565b91506108bf82610858565b604082019050919050565b600060208201905081810360008301526108e3816108a7565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061092482610584565b915061092f83610584565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610968576109676108ea565b5b828202905092915050565b61097c81610584565b82525050565b600060408201905061099760008301856106f6565b6109a46020830184610973565b9392505050565b6109b4816106c0565b81146109bf57600080fd5b50565b6000815190506109d1816109ab565b92915050565b6000602082840312156109ed576109ec61051c565b5b60006109fb848285016109c2565b91505092915050565b7f4d65726b6c654469737472696275746f723a205472616e73666572206661696c60008201527f65642e0000000000000000000000000000000000000000000000000000000000602082015250565b6000610a60602383610720565b9150610a6b82610a04565b604082019050919050565b60006020820190508181036000830152610a8f81610a53565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000819050919050565b610ae0610adb826104e8565b610ac5565b82525050565b6000610af28285610acf565b602082019150610b028284610acf565b6020820191508190509392505050565b6000610b1d82610584565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610b5057610b4f6108ea565b5b60018201905091905056fea264697066735822122073d0647d72d2f6beffd561372331eae676130e5e4e278af5306941adfe65a4eb64736f6c634300080b0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c80632eb4a7ab146100515780633d13f8741461006f5780638cc080251461008b578063fc0c546a146100bb575b600080fd5b6100596100d9565b6040516100669190610501565b60405180910390f35b6100896004803603810190610084919061061f565b6100fd565b005b6100a560048036038101906100a09190610693565b6103a5565b6040516100b291906106db565b60405180910390f35b6100c36103fa565b6040516100d09190610705565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000081565b610106846103a5565b15610146576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161013d906107a3565b60405180910390fd5b6000848460405160200161015b92919061082c565b6040516020818303038152906040528051906020012090506101df838380806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050507f00000000000000000000000000000000000000000000000000000000000000008361041e565b61021e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610215906108ca565b60405180910390fd5b60016000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb86670de0b6b3a7640000876102c69190610919565b6040518363ffffffff1660e01b81526004016102e3929190610982565b6020604051808303816000875af1158015610302573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061032691906109d7565b610365576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161035c90610a76565b60405180910390fd5b7fd8138f8a3f377c5259ca548e70e4c2de94f129f5a11036a15b69513cba2b426a8585604051610396929190610982565b60405180910390a15050505050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008261042b8584610435565b1490509392505050565b60008082905060005b84518110156104dd57600085828151811061045c5761045b610a96565b5b6020026020010151905080831161049d578281604051602001610480929190610ae6565b6040516020818303038152906040528051906020012092506104c9565b80836040516020016104b0929190610ae6565b6040516020818303038152906040528051906020012092505b5080806104d590610b12565b91505061043e565b508091505092915050565b6000819050919050565b6104fb816104e8565b82525050565b600060208201905061051660008301846104f2565b92915050565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061055182610526565b9050919050565b61056181610546565b811461056c57600080fd5b50565b60008135905061057e81610558565b92915050565b6000819050919050565b61059781610584565b81146105a257600080fd5b50565b6000813590506105b48161058e565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f8401126105df576105de6105ba565b5b8235905067ffffffffffffffff8111156105fc576105fb6105bf565b5b602083019150836020820283011115610618576106176105c4565b5b9250929050565b600080600080606085870312156106395761063861051c565b5b60006106478782880161056f565b9450506020610658878288016105a5565b935050604085013567ffffffffffffffff81111561067957610678610521565b5b610685878288016105c9565b925092505092959194509250565b6000602082840312156106a9576106a861051c565b5b60006106b78482850161056f565b91505092915050565b60008115159050919050565b6106d5816106c0565b82525050565b60006020820190506106f060008301846106cc565b92915050565b6106ff81610546565b82525050565b600060208201905061071a60008301846106f6565b92915050565b600082825260208201905092915050565b7f4d65726b6c654469737472696275746f723a2044726f7020616c72656164792060008201527f636c61696d65642e000000000000000000000000000000000000000000000000602082015250565b600061078d602883610720565b915061079882610731565b604082019050919050565b600060208201905081810360008301526107bc81610780565b9050919050565b60008160601b9050919050565b60006107db826107c3565b9050919050565b60006107ed826107d0565b9050919050565b61080561080082610546565b6107e2565b82525050565b6000819050919050565b61082661082182610584565b61080b565b82525050565b600061083882856107f4565b6014820191506108488284610815565b6020820191508190509392505050565b7f4d65726b6c654469737472696275746f723a20496e76616c69642070726f6f6660008201527f2e00000000000000000000000000000000000000000000000000000000000000602082015250565b60006108b4602183610720565b91506108bf82610858565b604082019050919050565b600060208201905081810360008301526108e3816108a7565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061092482610584565b915061092f83610584565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610968576109676108ea565b5b828202905092915050565b61097c81610584565b82525050565b600060408201905061099760008301856106f6565b6109a46020830184610973565b9392505050565b6109b4816106c0565b81146109bf57600080fd5b50565b6000815190506109d1816109ab565b92915050565b6000602082840312156109ed576109ec61051c565b5b60006109fb848285016109c2565b91505092915050565b7f4d65726b6c654469737472696275746f723a205472616e73666572206661696c60008201527f65642e0000000000000000000000000000000000000000000000000000000000602082015250565b6000610a60602383610720565b9150610a6b82610a04565b604082019050919050565b60006020820190508181036000830152610a8f81610a53565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000819050919050565b610ae0610adb826104e8565b610ac5565b82525050565b6000610af28285610acf565b602082019150610b028284610acf565b6020820191508190509392505050565b6000610b1d82610584565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610b5057610b4f6108ea565b5b60018201905091905056fea264697066735822122073d0647d72d2f6beffd561372331eae676130e5e4e278af5306941adfe65a4eb64736f6c634300080b0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 770,
        "contract": "contracts/MerkleDistributor.sol:MerkleDistributor",
        "label": "claimed",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      }
    }
  }
}